#RotationTrigger local copy of O2's Walking Chip, commented to the best of ability & used for understanding of how it works & for possible futre endevours.
#A wobble is caused at high speeds, which could be fixed by lowering the max speed

#Replaced the hard-coded Ranger value with RangerMaxHeight variable

@name MODIFIED O2's Walking Chip
@inputs Pod:wirelink
@outputs [F1 F2]:angle RA MotionWS RotationAD Space Shift Alt E:entity Props:array RangerDown:ranger MovingCentreOfMass:vector RotationTrigger:angle RangerHeight Roll HasJumped JumpPwr Power Spd ESpd RunSpeedCap WalkS Acc MaxSpd Cos Sin I WVel Accumulate Torque
@persist RangerMaxHeight
@model models/squad/sf_plates/sf_plate2x3.mdl
#models/hunter/blocks/cube05x05x025.mdl
#Model used by the expression

# -- VARIABLES --
#Hologram
#- F1 & F2 = angle variables utilised by holograms & dermine how the legs should rotate
#- RA      = hologram related, haven't investigated




interval(10)
#------------------------------------------------
if(first()|duped()|dupefinished()){#Upon spawning
    E=entity()
    E:setMass(200000)        #Sets its own mass
    Props=E:getConstraints() #Gets attached props
    
    MaxSpd=50                #Maximum speed of movement
    JumpPwr=50               #Force of Jump
    Torque=50                #Turn Force
    WVel=100                 #???
    Accumulate=0.4           #???
    
    RangerMaxHeight = 45     #The height which the chip will hover from
    #Original: 45
    
    #Creates Legs of Walker
    #holoCreate(1)
    #holoCreate(2)
    #holoCreate(3)
    #holoCreate(4)
    #holoCreate(5)
    #holoCreate(6)
    #holoCreate(7)
    #holoPos(5,holoEntity(2):pos()-holoEntity(2):up()*10)
    #holoPos(6,holoEntity(4):pos()-holoEntity(4):up()*10)
    #holoParent(5,2)
    #holoParent(6,4)
    #holoScaleUnits(1,vec(7.5,5,20))
    #holoScaleUnits(2,vec(7.5,5,20))
    #holoScaleUnits(3,vec(7.5,5,20))
    #holoScaleUnits(4,vec(7.5,5,20))
    #holoScaleUnits(5,vec(10,7.5,2))
    #holoScaleUnits(6,vec(10,7.5,2))
    #holoMaterial(1,"phoenix_storms/gear")
    #holoMaterial(2,"phoenix_storms/gear")
    #holoMaterial(3,"phoenix_storms/gear")
    #holoMaterial(4,"phoenix_storms/gear")
    #holoMaterial(5,"phoenix_storms/gear")
    #holoMaterial(6,"phoenix_storms/gear")
    #holoEntity(5):setTrails(0,100,0.35,"trails/smoke",vec(150,150,100),127)
    #holoEntity(6):setTrails(0,100,0.35,"trails/smoke",vec(150,150,100),127)
    #holoAlpha(7,0)
    #E:setMaterial("phoenix_storms/gear")
}
#------------------------------------------------

#Changes the material of all attached props
#if(changed(Props:count())){
#    for(I=1,Props:count(),perf()){
#        E:setMaterial("phoenix_storms/gear")
#        Props:entity(I):setMaterial("phoenix_storms/gear")
#    }
#}

#------------------------------------------------

#Types of objects the Ranger Raycast beam ignores
rangerFilter(E) #Ignores Itself (The Expression)
rangerFilter(Props)
RangerDown=rangerOffset(RangerMaxHeight,E:massCenter(),vec(0,0,-1))
#Beam 45 units in length, from the centre of mass

#------------------------------------------------

#Determines the Directions of movement
MotionWS =  (Pod:number("W")-Pod:number("S"))
RotationAD =(Pod:number("A")-Pod:number("D"))
Space =      Pod:number("Space")
Shift =      Pod:number("Shift")
Alt =        Pod:number("Alt")

#------------------------------------------------

MovingCentreOfMass=E:massCenter() #Centre of mass of Chip Model
RangerHeight=RangerDown:position():z()+(RangerMaxHeight + 1) #Current height of ranger?

ESpd=toUnit("km/h",E:velL():x())/2.5 #unsure of what this speed value represents, however it is used for cosmetic sides (hologram & footstep sound), AS WELL AS determining the height of hover
RunSpeedCap=(MaxSpd/((Alt|Space)+1) *(Shift+1)) #Forward/Backward Speed Cap, increasing when Shift is held down & decresing when Space or Alt is held down

MovingCentreOfMass+=E:forward()*Spd
RotationTrigger=ang(0,1,0)*RotationAD*Torque #Triggers when user wishes to rotate, allowing the rotation force to be applied

#RA=max(acos((min(RangerDown:distance(),40))/40),10)

Acc+=WVel #Accumilates a velocity which it uses for angles
#this velocity appears to be equal to WVel, which is equal to 100


#HOLOGRAM LEGS STUFF
#-------------------
#Sin=sin(Acc)
#Cos=cos(Acc)

#F1=E:toWorld(ang(Sin*min(ESpd*4.5,70)-RA,0,0))
#F2=E:toWorld(ang((Sin+(Cos/6))*min(ESpd*5,60)+RA,0,0))

#holoAng(1,F1)
#holoAng(2,F2)
#holoPos(1,(E:massCenter()+E:right()*13)-F1:up()*10)
#holoPos(2,(E:massCenter()+E:right()*13)-F1:up()*20-F2:up()*10)
#holoAng(5,F2-ang(RA,0,0))

#F1=E:toWorld(ang(-Sin*min(ESpd*4.5,70)-RA,0,0))
#F2=E:toWorld(ang((-Sin+(Cos/6))*min(ESpd*5,60)+RA,0,0))

#holoAng(3,F1)
#holoAng(4,F2)
#holoPos(3,(E:massCenter()-E:right()*13)-F1:up()*10)
#holoPos(4,(E:massCenter()-E:right()*13)-F1:up()*20-F2:up()*10)
#holoAng(6,F2-ang(RA,0,0))
#-------------------

#When the distance from ground to centre of mass equals 45 units or less, a hit is registered
if(RangerDown:hit()){
    
    if(changed(Space)&!Space){#If player pressed Space Bar & isn't currently holding it, JUMP
        if(Pod:number("Active")){ #If player is currently using Pod
            
            Power=max(JumpPwr-RangerDown:distance(),0)
            #E:soundPlay(0,0,"npc/dog/dog_footstep_run"+randint(1,8)+".wav")
            #E:soundPlay(1,0,"/vehicles/crane/crane_extend_stop.wav")
            #E:soundPlay(2,0,"npc/dog/dog_pneumatic"+randint(1,2)+".wav")
            HasJumped=1
        }
    }
    
    #Forward/Backward Movement
    if(MotionWS>0){# Forwards
        if(Spd<RunSpeedCap){Spd+=Accumulate}
        if(Spd>RunSpeedCap){Spd-=Accumulate}
    }
    if(MotionWS<0){#Backwards
        if(Spd>-RunSpeedCap){Spd-=Accumulate}
        if(Spd<-RunSpeedCap){Spd+=Accumulate}
    }
    
    #WALK/RUNNING SOUND DELAY
    
    #WalkS+=WVel*(abs(ESpd)>0.5) #seems to account for every time the robot places its foot down, depending on speed
    #if(180<WalkS){#The value may be hard-coded & I assume was chosen to match with when the robot places its foot down
    #    WalkS=0
    #    E:soundPlay(2,0,"npc/dog/dog_footstep_run"+randint(1,8)+".wav")
    #}
    
    #-----------------------------------------------------------------
    #Force Holding up the chip mid-aid at a specific height
    #This force also has the additional bit of code, which lowers the vehicle a bit to the ground when Space is held down!
    
    #ORIGINAL
    #E:applyForce(((MovingCentreOfMass:setZ(RangerHeight-5+sin(Acc*2)*E:velL():x()/(100-(Shift*50*(abs(ESpd)>10))))+vec(0,0,-(Space*15)+Power)-E:massCenter())*2.5-E:vel()/10)*E:mass())
    
    #No Jump Dip, Jump is a lot weaker!
    #THE REASON FOR THIS IS HOW THE Power Variable is formed in the part of the code in which a check is made when the player is performing a jump
    #SIMPLE FIX: Increase the value of Power when Jump release is detected OR multiply the power inside the statement below by a factor, for example x10
    E:applyForce(((MovingCentreOfMass:setZ(RangerHeight-5+sin(Acc*2)*E:velL():x()/(100-(Shift*50*(abs(ESpd)>10))))+vec(0,0,Power*10)-E:massCenter())*2.5-E:vel()/10)*E:mass())
    
    
    #-----------------------------------------------------------------
    #Force Allowing the player to turn the vehicle
    E:applyAngForce((RotationTrigger*10-E:angVel())*E:inertia():length()*10)
    #-----------------------------------------------------------------
}

#Hologram jump behaviour & Trail Behaviour upon jumping
#-----------------------------------------------------------------
#if(changed(HasJumped&E:velL():z()>=0)&(HasJumped&E:velL():z()>=0)){holoPos(7,E:massCenter()),holoParent(7,E)}
#if(E:velL():z()<0){
#    holoUnparent(7)
#}
#if(changed(HasJumped)&HasJumped){timer("trails",50)}
#if(clk("trails")){holoEntity(7):setTrails(0,100,1,"trails/smoke",vec(200,200,200),150)}
#-----------------------------------------------------------------

#Air & Ground Friction
if(!MotionWS|HasJumped){ #If not turning OR mid-air
    #Ground friction = 1/30 every interval
    #Air Friction = 1/130 every interval
    
    #OG, Redundant code
    #if(Spd>0){
    #    Spd-=Spd/(30+HasJumped*100)
    #}
    #if(Spd<0){
    #    Spd-=Spd/(30+HasJumped*100)
    #}
    
    if (Spd != 0){
        Spd-=Spd/(30+HasJumped*100)
    }
}

#A statement that triggers when vehicle lands back down onto the ground from a jump
if(changed(RangerDown:hit())&RangerDown:hit()){
    #holoEntity(7):removeTrails()
    HasJumped=0
    Power=0
    #E:soundPlay(1,0,"/vehicles/crane/crane_extend_stop.wav")
}

#Force Responsible for keeping the vehicle upright
#E:applyAngForce((angnorm(ang(0,E:angles():yaw(),-sin(Acc)*E:velL():x()/50+clamp((E:velL():y()/5),-5,5))-E:angles())*10-E:angVel())*E:inertia():length()*10)

#NO SHAKE!
E:applyAngForce((angnorm(ang(0,E:angles():yaw(),0)-E:angles())*10-E:angVel())*E:inertia():length()*10)
